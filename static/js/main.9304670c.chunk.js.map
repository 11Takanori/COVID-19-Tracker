{"version":3,"sources":["Countries.ts","Chart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Countries","Country","Slug","ISO2","Chart","useState","countryName","setcountryName","error","setError","isLoaded","setIsLoaded","items","setItems","url","useEffect","fetch","then","res","json","result","covid19Data","map","item","name","confirmed","Confirmed","deaths","Deaths","recovered","Recovered","active","Active","date","Date","toLocaleString","substring","className","style","width","Autocomplete","freeSolo","options","option","defaultValue","renderInput","params","TextField","label","margin","variant","onSelect","event","country","find","object","target","value","searchCountry","height","data","strokeDasharray","dataKey","padding","left","right","type","stroke","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9304670c.chunk.js","sourcesContent":["const Countries = [\r\n  { Country: \"ALA Aland Islands\", Slug: \"ala-aland-islands\", ISO2: \"AX\" },\r\n  { Country: \"Afghanistan\", Slug: \"afghanistan\", ISO2: \"AF\" },\r\n  { Country: \"Albania\", Slug: \"albania\", ISO2: \"AL\" },\r\n  { Country: \"Algeria\", Slug: \"algeria\", ISO2: \"DZ\" },\r\n  { Country: \"American Samoa\", Slug: \"american-samoa\", ISO2: \"AS\" },\r\n  { Country: \"Andorra\", Slug: \"andorra\", ISO2: \"AD\" },\r\n  { Country: \"Angola\", Slug: \"angola\", ISO2: \"AO\" },\r\n  { Country: \"Anguilla\", Slug: \"anguilla\", ISO2: \"AI\" },\r\n  { Country: \"Antarctica\", Slug: \"antarctica\", ISO2: \"AQ\" },\r\n  { Country: \"Antigua and Barbuda\", Slug: \"antigua-and-barbuda\", ISO2: \"AG\" },\r\n  { Country: \"Argentina\", Slug: \"argentina\", ISO2: \"AR\" },\r\n  { Country: \"Armenia\", Slug: \"armenia\", ISO2: \"AM\" },\r\n  { Country: \"Aruba\", Slug: \"aruba\", ISO2: \"AW\" },\r\n  { Country: \"Australia\", Slug: \"australia\", ISO2: \"AU\" },\r\n  { Country: \"Austria\", Slug: \"austria\", ISO2: \"AT\" },\r\n  { Country: \"Azerbaijan\", Slug: \"azerbaijan\", ISO2: \"AZ\" },\r\n  { Country: \"Bahamas\", Slug: \"bahamas\", ISO2: \"BS\" },\r\n  { Country: \"Bahrain\", Slug: \"bahrain\", ISO2: \"BH\" },\r\n  { Country: \"Bangladesh\", Slug: \"bangladesh\", ISO2: \"BD\" },\r\n  { Country: \"Barbados\", Slug: \"barbados\", ISO2: \"BB\" },\r\n  { Country: \"Belarus\", Slug: \"belarus\", ISO2: \"BY\" },\r\n  { Country: \"Belgium\", Slug: \"belgium\", ISO2: \"BE\" },\r\n  { Country: \"Belize\", Slug: \"belize\", ISO2: \"BZ\" },\r\n  { Country: \"Benin\", Slug: \"benin\", ISO2: \"BJ\" },\r\n  { Country: \"Bermuda\", Slug: \"bermuda\", ISO2: \"BM\" },\r\n  { Country: \"Bhutan\", Slug: \"bhutan\", ISO2: \"BT\" },\r\n  { Country: \"Bolivia\", Slug: \"bolivia\", ISO2: \"BO\" },\r\n  {\r\n    Country: \"Bosnia and Herzegovina\",\r\n    Slug: \"bosnia-and-herzegovina\",\r\n    ISO2: \"BA\",\r\n  },\r\n  { Country: \"Botswana\", Slug: \"botswana\", ISO2: \"BW\" },\r\n  { Country: \"Bouvet Island\", Slug: \"bouvet-island\", ISO2: \"BV\" },\r\n  { Country: \"Brazil\", Slug: \"brazil\", ISO2: \"BR\" },\r\n  {\r\n    Country: \"British Indian Ocean Territory\",\r\n    Slug: \"british-indian-ocean-territory\",\r\n    ISO2: \"IO\",\r\n  },\r\n  {\r\n    Country: \"British Virgin Islands\",\r\n    Slug: \"british-virgin-islands\",\r\n    ISO2: \"VG\",\r\n  },\r\n  { Country: \"Brunei Darussalam\", Slug: \"brunei\", ISO2: \"BN\" },\r\n  { Country: \"Bulgaria\", Slug: \"bulgaria\", ISO2: \"BG\" },\r\n  { Country: \"Burkina Faso\", Slug: \"burkina-faso\", ISO2: \"BF\" },\r\n  { Country: \"Burundi\", Slug: \"burundi\", ISO2: \"BI\" },\r\n  { Country: \"Cambodia\", Slug: \"cambodia\", ISO2: \"KH\" },\r\n  { Country: \"Cameroon\", Slug: \"cameroon\", ISO2: \"CM\" },\r\n  { Country: \"Canada\", Slug: \"canada\", ISO2: \"CA\" },\r\n  { Country: \"Cape Verde\", Slug: \"cape-verde\", ISO2: \"CV\" },\r\n  { Country: \"Cayman Islands\", Slug: \"cayman-islands\", ISO2: \"KY\" },\r\n  {\r\n    Country: \"Central African Republic\",\r\n    Slug: \"central-african-republic\",\r\n    ISO2: \"CF\",\r\n  },\r\n  { Country: \"Chad\", Slug: \"chad\", ISO2: \"TD\" },\r\n  { Country: \"Chile\", Slug: \"chile\", ISO2: \"CL\" },\r\n  { Country: \"China\", Slug: \"china\", ISO2: \"CN\" },\r\n  { Country: \"Christmas Island\", Slug: \"christmas-island\", ISO2: \"CX\" },\r\n  {\r\n    Country: \"Cocos (Keeling) Islands\",\r\n    Slug: \"cocos-keeling-islands\",\r\n    ISO2: \"CC\",\r\n  },\r\n  { Country: \"Colombia\", Slug: \"colombia\", ISO2: \"CO\" },\r\n  { Country: \"Comoros\", Slug: \"comoros\", ISO2: \"KM\" },\r\n  { Country: \"Congo (Brazzaville)\", Slug: \"congo-brazzaville\", ISO2: \"CG\" },\r\n  { Country: \"Congo (Kinshasa)\", Slug: \"congo-kinshasa\", ISO2: \"CD\" },\r\n  { Country: \"Cook Islands\", Slug: \"cook-islands\", ISO2: \"CK\" },\r\n  { Country: \"Costa Rica\", Slug: \"costa-rica\", ISO2: \"CR\" },\r\n  { Country: \"Croatia\", Slug: \"croatia\", ISO2: \"HR\" },\r\n  { Country: \"Cuba\", Slug: \"cuba\", ISO2: \"CU\" },\r\n  { Country: \"Cyprus\", Slug: \"cyprus\", ISO2: \"CY\" },\r\n  { Country: \"Czech Republic\", Slug: \"czech-republic\", ISO2: \"CZ\" },\r\n  { Country: \"Côte d'Ivoire\", Slug: \"cote-divoire\", ISO2: \"CI\" },\r\n  { Country: \"Denmark\", Slug: \"denmark\", ISO2: \"DK\" },\r\n  { Country: \"Djibouti\", Slug: \"djibouti\", ISO2: \"DJ\" },\r\n  { Country: \"Dominica\", Slug: \"dominica\", ISO2: \"DM\" },\r\n  { Country: \"Dominican Republic\", Slug: \"dominican-republic\", ISO2: \"DO\" },\r\n  { Country: \"Ecuador\", Slug: \"ecuador\", ISO2: \"EC\" },\r\n  { Country: \"Egypt\", Slug: \"egypt\", ISO2: \"EG\" },\r\n  { Country: \"El Salvador\", Slug: \"el-salvador\", ISO2: \"SV\" },\r\n  { Country: \"Equatorial Guinea\", Slug: \"equatorial-guinea\", ISO2: \"GQ\" },\r\n  { Country: \"Eritrea\", Slug: \"eritrea\", ISO2: \"ER\" },\r\n  { Country: \"Estonia\", Slug: \"estonia\", ISO2: \"EE\" },\r\n  { Country: \"Ethiopia\", Slug: \"ethiopia\", ISO2: \"ET\" },\r\n  {\r\n    Country: \"Falkland Islands (Malvinas)\",\r\n    Slug: \"falkland-islands-malvinas\",\r\n    ISO2: \"FK\",\r\n  },\r\n  { Country: \"Faroe Islands\", Slug: \"faroe-islands\", ISO2: \"FO\" },\r\n  { Country: \"Fiji\", Slug: \"fiji\", ISO2: \"FJ\" },\r\n  { Country: \"Finland\", Slug: \"finland\", ISO2: \"FI\" },\r\n  { Country: \"France\", Slug: \"france\", ISO2: \"FR\" },\r\n  { Country: \"French Guiana\", Slug: \"french-guiana\", ISO2: \"GF\" },\r\n  { Country: \"French Polynesia\", Slug: \"french-polynesia\", ISO2: \"PF\" },\r\n  {\r\n    Country: \"French Southern Territories\",\r\n    Slug: \"french-southern-territories\",\r\n    ISO2: \"TF\",\r\n  },\r\n  { Country: \"Gabon\", Slug: \"gabon\", ISO2: \"GA\" },\r\n  { Country: \"Gambia\", Slug: \"gambia\", ISO2: \"GM\" },\r\n  { Country: \"Georgia\", Slug: \"georgia\", ISO2: \"GE\" },\r\n  { Country: \"Germany\", Slug: \"germany\", ISO2: \"DE\" },\r\n  { Country: \"Ghana\", Slug: \"ghana\", ISO2: \"GH\" },\r\n  { Country: \"Gibraltar\", Slug: \"gibraltar\", ISO2: \"GI\" },\r\n  { Country: \"Greece\", Slug: \"greece\", ISO2: \"GR\" },\r\n  { Country: \"Greenland\", Slug: \"greenland\", ISO2: \"GL\" },\r\n  { Country: \"Grenada\", Slug: \"grenada\", ISO2: \"GD\" },\r\n  { Country: \"Guadeloupe\", Slug: \"guadeloupe\", ISO2: \"GP\" },\r\n  { Country: \"Guam\", Slug: \"guam\", ISO2: \"GU\" },\r\n  { Country: \"Guatemala\", Slug: \"guatemala\", ISO2: \"GT\" },\r\n  { Country: \"Guernsey\", Slug: \"guernsey\", ISO2: \"GG\" },\r\n  { Country: \"Guinea\", Slug: \"guinea\", ISO2: \"GN\" },\r\n  { Country: \"Guinea-Bissau\", Slug: \"guinea-bissau\", ISO2: \"GW\" },\r\n  { Country: \"Guyana\", Slug: \"guyana\", ISO2: \"GY\" },\r\n  { Country: \"Haiti\", Slug: \"haiti\", ISO2: \"HT\" },\r\n  {\r\n    Country: \"Heard and Mcdonald Islands\",\r\n    Slug: \"heard-and-mcdonald-islands\",\r\n    ISO2: \"HM\",\r\n  },\r\n  {\r\n    Country: \"Holy See (Vatican City State)\",\r\n    Slug: \"holy-see-vatican-city-state\",\r\n    ISO2: \"VA\",\r\n  },\r\n  { Country: \"Honduras\", Slug: \"honduras\", ISO2: \"HN\" },\r\n  { Country: \"Hong Kong, SAR China\", Slug: \"hong-kong-sar-china\", ISO2: \"HK\" },\r\n  { Country: \"Hungary\", Slug: \"hungary\", ISO2: \"HU\" },\r\n  { Country: \"Iceland\", Slug: \"iceland\", ISO2: \"IS\" },\r\n  { Country: \"India\", Slug: \"india\", ISO2: \"IN\" },\r\n  { Country: \"Indonesia\", Slug: \"indonesia\", ISO2: \"ID\" },\r\n  { Country: \"Iran, Islamic Republic of\", Slug: \"iran\", ISO2: \"IR\" },\r\n  { Country: \"Iraq\", Slug: \"iraq\", ISO2: \"IQ\" },\r\n  { Country: \"Ireland\", Slug: \"ireland\", ISO2: \"IE\" },\r\n  { Country: \"Isle of Man\", Slug: \"isle-of-man\", ISO2: \"IM\" },\r\n  { Country: \"Israel\", Slug: \"israel\", ISO2: \"IL\" },\r\n  { Country: \"Italy\", Slug: \"italy\", ISO2: \"IT\" },\r\n  { Country: \"Jamaica\", Slug: \"jamaica\", ISO2: \"JM\" },\r\n  { Country: \"Japan\", Slug: \"japan\", ISO2: \"JP\" },\r\n  { Country: \"Jersey\", Slug: \"jersey\", ISO2: \"JE\" },\r\n  { Country: \"Jordan\", Slug: \"jordan\", ISO2: \"JO\" },\r\n  { Country: \"Kazakhstan\", Slug: \"kazakhstan\", ISO2: \"KZ\" },\r\n  { Country: \"Kenya\", Slug: \"kenya\", ISO2: \"KE\" },\r\n  { Country: \"Kiribati\", Slug: \"kiribati\", ISO2: \"KI\" },\r\n  { Country: \"Korea (North)\", Slug: \"korea-north\", ISO2: \"KP\" },\r\n  { Country: \"Korea (South)\", Slug: \"korea-south\", ISO2: \"KR\" },\r\n  { Country: \"Kuwait\", Slug: \"kuwait\", ISO2: \"KW\" },\r\n  { Country: \"Kyrgyzstan\", Slug: \"kyrgyzstan\", ISO2: \"KG\" },\r\n  { Country: \"Lao PDR\", Slug: \"lao-pdr\", ISO2: \"LA\" },\r\n  { Country: \"Latvia\", Slug: \"latvia\", ISO2: \"LV\" },\r\n  { Country: \"Lebanon\", Slug: \"lebanon\", ISO2: \"LB\" },\r\n  { Country: \"Lesotho\", Slug: \"lesotho\", ISO2: \"LS\" },\r\n  { Country: \"Liberia\", Slug: \"liberia\", ISO2: \"LR\" },\r\n  { Country: \"Libya\", Slug: \"libya\", ISO2: \"LY\" },\r\n  { Country: \"Liechtenstein\", Slug: \"liechtenstein\", ISO2: \"LI\" },\r\n  { Country: \"Lithuania\", Slug: \"lithuania\", ISO2: \"LT\" },\r\n  { Country: \"Luxembourg\", Slug: \"luxembourg\", ISO2: \"LU\" },\r\n  { Country: \"Macao, SAR China\", Slug: \"macao-sar-china\", ISO2: \"MO\" },\r\n  { Country: \"Macedonia, Republic of\", Slug: \"macedonia\", ISO2: \"MK\" },\r\n  { Country: \"Madagascar\", Slug: \"madagascar\", ISO2: \"MG\" },\r\n  { Country: \"Malawi\", Slug: \"malawi\", ISO2: \"MW\" },\r\n  { Country: \"Malaysia\", Slug: \"malaysia\", ISO2: \"MY\" },\r\n  { Country: \"Maldives\", Slug: \"maldives\", ISO2: \"MV\" },\r\n  { Country: \"Mali\", Slug: \"mali\", ISO2: \"ML\" },\r\n  { Country: \"Malta\", Slug: \"malta\", ISO2: \"MT\" },\r\n  { Country: \"Marshall Islands\", Slug: \"marshall-islands\", ISO2: \"MH\" },\r\n  { Country: \"Martinique\", Slug: \"martinique\", ISO2: \"MQ\" },\r\n  { Country: \"Mauritania\", Slug: \"mauritania\", ISO2: \"MR\" },\r\n  { Country: \"Mauritius\", Slug: \"mauritius\", ISO2: \"MU\" },\r\n  { Country: \"Mayotte\", Slug: \"mayotte\", ISO2: \"YT\" },\r\n  { Country: \"Mexico\", Slug: \"mexico\", ISO2: \"MX\" },\r\n  {\r\n    Country: \"Micronesia, Federated States of\",\r\n    Slug: \"micronesia\",\r\n    ISO2: \"FM\",\r\n  },\r\n  { Country: \"Moldova\", Slug: \"moldova\", ISO2: \"MD\" },\r\n  { Country: \"Monaco\", Slug: \"monaco\", ISO2: \"MC\" },\r\n  { Country: \"Mongolia\", Slug: \"mongolia\", ISO2: \"MN\" },\r\n  { Country: \"Montenegro\", Slug: \"montenegro\", ISO2: \"ME\" },\r\n  { Country: \"Montserrat\", Slug: \"montserrat\", ISO2: \"MS\" },\r\n  { Country: \"Morocco\", Slug: \"morocco\", ISO2: \"MA\" },\r\n  { Country: \"Mozambique\", Slug: \"mozambique\", ISO2: \"MZ\" },\r\n  { Country: \"Myanmar\", Slug: \"myanmar\", ISO2: \"MM\" },\r\n  { Country: \"Namibia\", Slug: \"namibia\", ISO2: \"NA\" },\r\n  { Country: \"Nauru\", Slug: \"nauru\", ISO2: \"NR\" },\r\n  { Country: \"Nepal\", Slug: \"nepal\", ISO2: \"NP\" },\r\n  { Country: \"Netherlands\", Slug: \"netherlands\", ISO2: \"NL\" },\r\n  { Country: \"Netherlands Antilles\", Slug: \"netherlands-antilles\", ISO2: \"AN\" },\r\n  { Country: \"New Caledonia\", Slug: \"new-caledonia\", ISO2: \"NC\" },\r\n  { Country: \"New Zealand\", Slug: \"new-zealand\", ISO2: \"NZ\" },\r\n  { Country: \"Nicaragua\", Slug: \"nicaragua\", ISO2: \"NI\" },\r\n  { Country: \"Niger\", Slug: \"niger\", ISO2: \"NE\" },\r\n  { Country: \"Nigeria\", Slug: \"nigeria\", ISO2: \"NG\" },\r\n  { Country: \"Niue\", Slug: \"niue\", ISO2: \"NU\" },\r\n  { Country: \"Norfolk Island\", Slug: \"norfolk-island\", ISO2: \"NF\" },\r\n  {\r\n    Country: \"Northern Mariana Islands\",\r\n    Slug: \"northern-mariana-islands\",\r\n    ISO2: \"MP\",\r\n  },\r\n  { Country: \"Norway\", Slug: \"norway\", ISO2: \"NO\" },\r\n  { Country: \"Oman\", Slug: \"oman\", ISO2: \"OM\" },\r\n  { Country: \"Pakistan\", Slug: \"pakistan\", ISO2: \"PK\" },\r\n  { Country: \"Palau\", Slug: \"palau\", ISO2: \"PW\" },\r\n  { Country: \"Palestinian Territory\", Slug: \"palestine\", ISO2: \"PS\" },\r\n  { Country: \"Panama\", Slug: \"panama\", ISO2: \"PA\" },\r\n  { Country: \"Papua New Guinea\", Slug: \"papua-new-guinea\", ISO2: \"PG\" },\r\n  { Country: \"Paraguay\", Slug: \"paraguay\", ISO2: \"PY\" },\r\n  { Country: \"Peru\", Slug: \"peru\", ISO2: \"PE\" },\r\n  { Country: \"Philippines\", Slug: \"philippines\", ISO2: \"PH\" },\r\n  { Country: \"Pitcairn\", Slug: \"pitcairn\", ISO2: \"PN\" },\r\n  { Country: \"Poland\", Slug: \"poland\", ISO2: \"PL\" },\r\n  { Country: \"Portugal\", Slug: \"portugal\", ISO2: \"PT\" },\r\n  { Country: \"Puerto Rico\", Slug: \"puerto-rico\", ISO2: \"PR\" },\r\n  { Country: \"Qatar\", Slug: \"qatar\", ISO2: \"QA\" },\r\n  { Country: \"Republic of Kosovo\", Slug: \"kosovo\", ISO2: \"XK\" },\r\n  { Country: \"Romania\", Slug: \"romania\", ISO2: \"RO\" },\r\n  { Country: \"Russian Federation\", Slug: \"russia\", ISO2: \"RU\" },\r\n  { Country: \"Rwanda\", Slug: \"rwanda\", ISO2: \"RW\" },\r\n  { Country: \"Réunion\", Slug: \"réunion\", ISO2: \"RE\" },\r\n  { Country: \"Saint Helena\", Slug: \"saint-helena\", ISO2: \"SH\" },\r\n  {\r\n    Country: \"Saint Kitts and Nevis\",\r\n    Slug: \"saint-kitts-and-nevis\",\r\n    ISO2: \"KN\",\r\n  },\r\n  { Country: \"Saint Lucia\", Slug: \"saint-lucia\", ISO2: \"LC\" },\r\n  {\r\n    Country: \"Saint Pierre and Miquelon\",\r\n    Slug: \"saint-pierre-and-miquelon\",\r\n    ISO2: \"PM\",\r\n  },\r\n  {\r\n    Country: \"Saint Vincent and Grenadines\",\r\n    Slug: \"saint-vincent-and-the-grenadines\",\r\n    ISO2: \"VC\",\r\n  },\r\n  { Country: \"Saint-Barthélemy\", Slug: \"saint-barthélemy\", ISO2: \"BL\" },\r\n  {\r\n    Country: \"Saint-Martin (French part)\",\r\n    Slug: \"saint-martin-french-part\",\r\n    ISO2: \"MF\",\r\n  },\r\n  { Country: \"Samoa\", Slug: \"samoa\", ISO2: \"WS\" },\r\n  { Country: \"San Marino\", Slug: \"san-marino\", ISO2: \"SM\" },\r\n  {\r\n    Country: \"Sao Tome and Principe\",\r\n    Slug: \"sao-tome-and-principe\",\r\n    ISO2: \"ST\",\r\n  },\r\n  { Country: \"Saudi Arabia\", Slug: \"saudi-arabia\", ISO2: \"SA\" },\r\n  { Country: \"Senegal\", Slug: \"senegal\", ISO2: \"SN\" },\r\n  { Country: \"Serbia\", Slug: \"serbia\", ISO2: \"RS\" },\r\n  { Country: \"Seychelles\", Slug: \"seychelles\", ISO2: \"SC\" },\r\n  { Country: \"Sierra Leone\", Slug: \"sierra-leone\", ISO2: \"SL\" },\r\n  { Country: \"Singapore\", Slug: \"singapore\", ISO2: \"SG\" },\r\n  { Country: \"Slovakia\", Slug: \"slovakia\", ISO2: \"SK\" },\r\n  { Country: \"Slovenia\", Slug: \"slovenia\", ISO2: \"SI\" },\r\n  { Country: \"Solomon Islands\", Slug: \"solomon-islands\", ISO2: \"SB\" },\r\n  { Country: \"Somalia\", Slug: \"somalia\", ISO2: \"SO\" },\r\n  { Country: \"South Africa\", Slug: \"south-africa\", ISO2: \"ZA\" },\r\n  {\r\n    Country: \"South Georgia and the South Sandwich Islands\",\r\n    Slug: \"south-georgia-and-the-south-sandwich-islands\",\r\n    ISO2: \"GS\",\r\n  },\r\n  { Country: \"South Sudan\", Slug: \"south-sudan\", ISO2: \"SS\" },\r\n  { Country: \"Spain\", Slug: \"spain\", ISO2: \"ES\" },\r\n  { Country: \"Sri Lanka\", Slug: \"sri-lanka\", ISO2: \"LK\" },\r\n  { Country: \"Sudan\", Slug: \"sudan\", ISO2: \"SD\" },\r\n  { Country: \"Suriname\", Slug: \"suriname\", ISO2: \"SR\" },\r\n  {\r\n    Country: \"Svalbard and Jan Mayen Islands\",\r\n    Slug: \"svalbard-and-jan-mayen-islands\",\r\n    ISO2: \"SJ\",\r\n  },\r\n  { Country: \"Swaziland\", Slug: \"swaziland\", ISO2: \"SZ\" },\r\n  { Country: \"Sweden\", Slug: \"sweden\", ISO2: \"SE\" },\r\n  { Country: \"Switzerland\", Slug: \"switzerland\", ISO2: \"CH\" },\r\n  { Country: \"Syrian Arab Republic (Syria)\", Slug: \"syria\", ISO2: \"SY\" },\r\n  { Country: \"Taiwan, Republic of China\", Slug: \"taiwan\", ISO2: \"TW\" },\r\n  { Country: \"Tajikistan\", Slug: \"tajikistan\", ISO2: \"TJ\" },\r\n  { Country: \"Tanzania, United Republic of\", Slug: \"tanzania\", ISO2: \"TZ\" },\r\n  { Country: \"Thailand\", Slug: \"thailand\", ISO2: \"TH\" },\r\n  { Country: \"Timor-Leste\", Slug: \"timor-leste\", ISO2: \"TL\" },\r\n  { Country: \"Togo\", Slug: \"togo\", ISO2: \"TG\" },\r\n  { Country: \"Tokelau\", Slug: \"tokelau\", ISO2: \"TK\" },\r\n  { Country: \"Tonga\", Slug: \"tonga\", ISO2: \"TO\" },\r\n  { Country: \"Trinidad and Tobago\", Slug: \"trinidad-and-tobago\", ISO2: \"TT\" },\r\n  { Country: \"Tunisia\", Slug: \"tunisia\", ISO2: \"TN\" },\r\n  { Country: \"Turkey\", Slug: \"turkey\", ISO2: \"TR\" },\r\n  { Country: \"Turkmenistan\", Slug: \"turkmenistan\", ISO2: \"TM\" },\r\n  {\r\n    Country: \"Turks and Caicos Islands\",\r\n    Slug: \"turks-and-caicos-islands\",\r\n    ISO2: \"TC\",\r\n  },\r\n  { Country: \"Tuvalu\", Slug: \"tuvalu\", ISO2: \"TV\" },\r\n  {\r\n    Country: \"US Minor Outlying Islands\",\r\n    Slug: \"us-minor-outlying-islands\",\r\n    ISO2: \"UM\",\r\n  },\r\n  { Country: \"Uganda\", Slug: \"uganda\", ISO2: \"UG\" },\r\n  { Country: \"Ukraine\", Slug: \"ukraine\", ISO2: \"UA\" },\r\n  { Country: \"United Arab Emirates\", Slug: \"united-arab-emirates\", ISO2: \"AE\" },\r\n  { Country: \"United Kingdom\", Slug: \"united-kingdom\", ISO2: \"GB\" },\r\n  { Country: \"United States of America\", Slug: \"united-states\", ISO2: \"US\" },\r\n  { Country: \"Uruguay\", Slug: \"uruguay\", ISO2: \"UY\" },\r\n  { Country: \"Uzbekistan\", Slug: \"uzbekistan\", ISO2: \"UZ\" },\r\n  { Country: \"Vanuatu\", Slug: \"vanuatu\", ISO2: \"VU\" },\r\n  { Country: \"Venezuela (Bolivarian Republic)\", Slug: \"venezuela\", ISO2: \"VE\" },\r\n  { Country: \"Viet Nam\", Slug: \"vietnam\", ISO2: \"VN\" },\r\n  { Country: \"Virgin Islands, US\", Slug: \"virgin-islands\", ISO2: \"VI\" },\r\n  {\r\n    Country: \"Wallis and Futuna Islands\",\r\n    Slug: \"wallis-and-futuna-islands\",\r\n    ISO2: \"WF\",\r\n  },\r\n  { Country: \"Western Sahara\", Slug: \"western-sahara\", ISO2: \"EH\" },\r\n  { Country: \"Yemen\", Slug: \"yemen\", ISO2: \"YE\" },\r\n  { Country: \"Zambia\", Slug: \"zambia\", ISO2: \"ZM\" },\r\n  { Country: \"Zimbabwe\", Slug: \"zimbabwe\", ISO2: \"ZW\" },\r\n];\r\n\r\nexport default Countries;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Countries from \"./Countries\";\r\nimport \"./Chart.css\";\r\n\r\ntype LiveByCountryAndStatusJSON = {\r\n  Country: string;\r\n  CountryCode: string;\r\n  Province: string;\r\n  City: string;\r\n  CityCode: string;\r\n  Lat: string;\r\n  Lon: string;\r\n  Confirmed: number;\r\n  Deaths: number;\r\n  Recovered: number;\r\n  Active: number;\r\n  Date: Date;\r\n};\r\n\r\ninterface LiveByCountryAndStatus {\r\n  name: string;\r\n  confirmed: number;\r\n  deaths: number;\r\n  recovered: number;\r\n  active: number;\r\n  date: string;\r\n}\r\n\r\nfunction Chart() {\r\n  const [countryName, setcountryName] = useState<string>(\"japan\");\r\n  const [error, setError] = useState<null | string>(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState<LiveByCountryAndStatusJSON[]>([]);\r\n\r\n  const url =\r\n    \"https://api.covid19api.com/live/country/\" +\r\n    countryName +\r\n    \"/status/confirmed\";\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  }, [countryName]);\r\n\r\n  const covid19Data = items.map(\r\n    (item) =>\r\n      ({\r\n        name: item.Country,\r\n        confirmed: item.Confirmed,\r\n        deaths: item.Deaths,\r\n        recovered: item.Recovered,\r\n        active: item.Active,\r\n        date: item.Date.toLocaleString().substring(0, 10),\r\n      } as LiveByCountryAndStatus)\r\n  );\r\n\r\n  const searchCountry = (event: any) => {\r\n    const country = Countries.find(\r\n      (object) => object.Country === event.target.value\r\n    );\r\n\r\n    if (country) {\r\n      setcountryName(country.Slug);\r\n    }\r\n  };\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <div className=\"search\">\r\n          <div style={{ width: 400 }}>\r\n            <Autocomplete\r\n              className=\"countryName\"\r\n              freeSolo\r\n              options={Countries.map((option) => option.Country)}\r\n              defaultValue=\"Japan\"\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"Search by country\"\r\n                  margin=\"normal\"\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n              onSelect={(event) => searchCountry(event)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"chart\">\r\n          <LineChart width={600} height={300} data={covid19Data}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"date\" padding={{ left: 10, right: 10 }} />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"confirmed\" stroke=\"#8884d8\" />\r\n            <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#ff4500\" />\r\n            <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"#00bfff\" />\r\n            <Line type=\"monotone\" dataKey=\"active\" stroke=\"#556b2f\" />\r\n          </LineChart>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Chart from \"./Chart\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>COVID-19 Tracker</h1>\r\n      <Chart />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}